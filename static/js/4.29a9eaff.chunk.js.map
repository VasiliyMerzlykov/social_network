{"version":3,"sources":["hoc/withAuthRedirect.js","components/Diaplogs/Dialogs.module.css","components/Diaplogs/DialogItem/DialogItem.js","components/Diaplogs/Message/Message.js","components/Diaplogs/Dialogs.js","components/Diaplogs/DialogsContainer.js"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Components","RedirectComponent","this","props","to","React","Component","connect","module","exports","DialogItem","path","id","className","s","dialog","active","name","Message","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","validate","required","component","Textarea","onChange","checkAreaMessage","placeholder","Dialogs","dialogs","dialogsItem","dialogsName","map","item","index","messages","messagePage","e","addMessage","newMessageBody","compose","newMessageText","dispatch","addNewMessageActionCreator"],"mappings":"0MAKIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAoBRE,IAjBf,SAA0BC,GAAa,IAC7BC,EAD4B,uKAI1B,OAAKC,KAAKC,MAAMN,OAET,cAACG,EAAD,eAAgBE,KAAKC,QAFG,cAAC,IAAD,CAAUC,GAAI,eAJnB,GACFC,IAAMC,WAYtC,OAFmCC,YAAQZ,EAA4B,GAApCY,CAAwCN,K,oBCnB/EO,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mGCW9MC,EARI,SAACP,GAChB,IAAIQ,EAAO,YAAcR,EAAMS,GAE/B,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACH,cAAC,IAAD,CAASZ,GAAIO,EAAb,SAAoBR,EAAMc,UCCnBC,EANC,SAACf,GACb,OACI,qBAAKU,UAAWC,IAAEK,QAAlB,SAA4BhB,EAAMgB,W,kCCGtCC,EAAeC,YAAiB,KAoC9BC,EAAsBC,YAAU,CAClCC,KAAM,wBADkBD,EAbL,SAACpB,GACpB,OACI,uBAAMsB,SAAUtB,EAAMuB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,SAAY,CAACC,IAAUT,GAAeU,UAAWC,IAAUd,KAAK,iBAAiBe,SAAU7B,EAAM8B,iBAAkBC,YAAY,wBAE1I,8BACI,oGAUDC,EAtCC,SAAChC,GAMb,OACI,sBAAKU,UAAWC,IAAEsB,QAAlB,UACI,qBAAKvB,UAAWC,IAAEuB,YAAlB,SACKlC,EAAMmC,YAAYC,KAAI,SAACC,EAAMC,GAAP,OAAiB,cAAC,EAAD,CAAwBxB,KAAMuB,EAAKvB,KAAML,GAAI4B,EAAK5B,IAAjC6B,QAE7D,sBAAK5B,UAAWC,IAAE4B,SAAlB,UACKvC,EAAMwC,YAAYJ,KAAI,SAACC,EAAMC,GAAP,OAAiB,cAAC,EAAD,CAAqBtB,QAASqB,EAAKrB,SAArBsB,MACrD,cAACnB,EAAD,CAAqBG,SAXd,SAACmB,GACjBzC,EAAM0C,WAAWD,EAAEE,0B,iBCUZC,sBACXxC,aAlBkB,SAACX,GACnB,MAAO,CACH0C,YAAa1C,EAAM+C,YAAYL,YAC/BK,YAAa/C,EAAM+C,YAAYxB,QAC/B6B,eAAgBpD,EAAM+C,YAAYK,mBAIjB,SAACC,GACtB,MAAO,CACHJ,WAAY,SAACD,GACTK,EAASC,YAA2BN,SAQ5C7C,IAFWgD,CAGbZ","file":"static/js/4.29a9eaff.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nfunction withAuthRedirect(Components) {\r\n    class RedirectComponent extends React.Component {\r\n\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'} />\r\n\r\n            return <Components {...this.props} />\r\n        }\r\n    }\r\n\r\n    \r\n    let ConnectAuthRedirectComponent = connect(mapStateToPropsForRedirect, {})(RedirectComponent)\r\n\r\n    return ConnectAuthRedirectComponent;\r\n}\r\n\r\n\r\nexport default withAuthRedirect;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1-WsQ\",\"dialogsItem\":\"Dialogs_dialogsItem__2tZeh\",\"dialogsItems\":\"Dialogs_dialogsItems__12jLi\",\"active\":\"Dialogs_active__1AW-d\",\"messages\":\"Dialogs_messages__1wvNE\",\"message\":\"Dialogs_message__1szYm\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from '../Dialogs.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react'\r\nimport s from '../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../common/FormsControls';\r\nimport { maxLengthCreator, required } from '../../utils/validators';\r\n\r\nlet maxLength100 = maxLengthCreator(100)\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let addNewMessage = (e) => {\r\n        props.addMessage(e.newMessageBody)\r\n    };\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {props.dialogsName.map((item, index) => <DialogItem key={index} name={item.name} id={item.id} />)}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {props.messagePage.map((item, index) => <Message key={index} message={item.message} />)}\r\n                {<AddMessageFormRedux onSubmit={addNewMessage} />}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field validate = {[required, maxLength100]} component={Textarea} name='newMessageBody' onChange={props.checkAreaMessage} placeholder='Enter yor message' />\r\n            </div>\r\n            <div>\r\n                <button>Отправить</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs;","import { connect } from 'react-redux';\r\nimport { addNewMessageActionCreator } from '../../redux/actions/actionCreator';\r\nimport Dialogs from './Dialogs';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsName: state.messagePage.dialogsName,\r\n        messagePage: state.messagePage.message,\r\n        newMessageText: state.messagePage.newMessageText,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (e) => {\r\n            dispatch(addNewMessageActionCreator(e))\r\n        }\r\n\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}